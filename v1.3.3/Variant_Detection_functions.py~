#/usr/bin/python

import subprocess,sys

def samtools_command(tumor_bam,normal_bam,base_output,reference_fasta,regions_file):
    print "Processing samtools mpileup..."
    try:
        print "samtools mpileup -Q 4 -h 50 -o 10 -e 17 -m 4 -f %s -l %s %s %s 2>> /tmp/error > %s.mpileup" % (reference_fasta,regions_file,normal_bam,tumor_bam,base_output)
        subprocess.call("samtools mpileup -Q 4 -h 50 -o 10 -e 17 -m 4 -f %s -l %s %s %s 2>> /tmp/error > %s.mpileup" % (reference_fasta,regions_file,normal_bam,tumor_bam,base_output),shell=True) 
    except:
        print "ERROR: Samtools mpileup failed.  Aborting..."
        sys.exit()
    
def varscan_command(VarScan,mpileup,base_output,tumor_purity,normal_purity):
    print "Processing VarScan variant calling..."
    try:
        print "java -jar VarScan.jar somatic %s.mpileup %s --mpileup 1 --tumor-purity %s --normal-purity %s --min-coverage 2 --strand-filter 1 --output-vcf 1" % (base_output,base_output,tumor_purity,normal_purity)
        subprocess.call("java -jar %s somatic %s.mpileup %s --mpileup 1 --tumor-purity %s --somatic-p-value 0.05 --normal-purity %s --min-coverage 2 --strand-filter 1 --output-vcf 1 2>> /tmp/error " % (VarScan,base_output,base_output,tumor_purity,normal_purity),shell=True)
        subprocess.call("java -jar %s processSomatic %s.indel.vcf 2>> /tmp/error" % (VarScan,base_output),shell=True)
        subprocess.call("java -jar %s processSomatic %s.snp.vcf 2>> /tmp/error" % (VarScan,base_output),shell=True)
        subprocess.call("vcf-concat %s.indel.vcf %s.snp.vcf 2>> /tmp/error > %s.snp.indel.vcf" % (base_output,base_output,base_output),shell=True)
        subprocess.call("vcf-sort -c %s.snp.indel.vcf 2>> /tmp/error > %s.snp.indel.sorted.vcf" % (base_output,base_output),shell=True)
        subprocess.call("vcf-concat %s*.hc.vcf 2>> /tmp/error > %s.snp.indel.hc.vcf" % (base_output,base_output),shell=True)
        subprocess.call("vcf-sort -c %s.snp.indel.hc.vcf 2>> /tmp/error > %s.snp.indel.sorted.hc.vcf" % (base_output,base_output),shell=True)
        subprocess.call("vcf-concat %s*Somatic.vcf 2>> /tmp/error > %s.snp.indel.somatic.vcf" % (base_output,base_output),shell=True)
        subprocess.call("vcf-sort -c %s.snp.indel.somatic.vcf 2>> /tmp/error > %s.snp.indel.sorted.somatic.vcf" % (base_output,base_output),shell=True)
        subprocess.call("vcf-concat %s*Germline.vcf 2>> /tmp/error > %s.snp.indel.germline.vcf" % (base_output,base_output),shell=True)
        subprocess.call("vcf-sort -c %s.snp.indel.germline.vcf 2>> /tmp/error > %s.snp.indel.sorted.germline.vcf" % (base_output,base_output),shell=True)
        subprocess.call("vcf-concat %s*LOH.vcf 2>> /tmp/error > %s.snp.indel.LOH.vcf" % (base_output,base_output),shell=True)
        subprocess.call("vcf-sort -c %s.snp.indel.LOH.vcf 2>> /tmp/error > %s.snp.indel.sorted.LOH.vcf" % (base_output,base_output),shell=True)
        subprocess.call("vcf-concat %s.snp.Somatic.vcf %s.indel.Somatic.vcf %s.snp.LOH.vcf %s.indel.LOH.vcf 2>> /tmp/error > %s.snp.indel.somatic_LOH.vcf" % (base_output,base_output,base_output,base_output,base_output),shell=True)
        subprocess.call("vcf-sort -c %s.snp.indel.somatic_LOH.vcf 2>> /tmp/error > %s.snp.indel.sorted.somatic_LOH.vcf" % (base_output,base_output),shell=True)
    except:
        print "ERROR: VarScan somatic variant calling failed.  Aborting..."
        sys.exit()
 
def SnpSift_filter(vcf_in,SnpSift,regex_filter,base_output,program):
    print "Filtering VCF input for %s..." % program
    try:
        subprocess.call('cat %s | java -jar %s filter "%s" 2>> /tmp/error > %s.%s.vcf' % (vcf_in,SnpSift,regex_filter,base_output,program),shell=True)
    except:
        print "ERROR: Filtering of VCF input with SnpSift failed.  Aborting..."

def VEP_command(VEP,REF_FASTA,base_output,program):
    print "Annotating file..."
    print 'perl %s --quiet --cache --merged --offline --fasta %s -i %s.%s.vcf --everything --no_intergenic --filter no_stop_retained_variant --filter no_synonymous_variant --json -o %s.%s.json -fork 16 2>> /tmp/error' % (VEP,REF_FASTA,base_output,program,base_output,program)
    try:
        #sys.stdout.write('perl %s --cache --merged --offline --fasta %s -i %s --everything --no_intergenic --filter no_stop_retained_variant --filter no_synonymous_variant --json -o %s.%s.json --fork 16' % (VEP,REF_FASTA,base_output,program,base_output,program))
        subprocess.call('perl %s --quiet --cache --merged --offline --fasta %s -i %s.%s.vcf --everything --no_intergenic --filter no_stop_retained_variant --filter no_synonymous_variant --json -o %s.%s.json -fork 16 2>> /tmp/error' % (VEP,REF_FASTA,base_output,program,base_output,program),shell=True)
    except:
        print "ERROR: Could not initiate annotation on VCF file"

def VEP_command_unfiltered(VEP,REF_FASTA,unfiltered_vcf,base_output,program):
    print "Annotating file..."
    #try:
    sys.stdout.write('perl %s --cache --merged --offline --fasta %s -i %s --everything --no_intergenic --filter no_stop_retained_variant --filter no_synonymous_variant --json -o %s.%s.json --fork 16' % (VEP,REF_FASTA,base_output,program,base_output,program))
    subprocess.call('perl %s --quiet --cache --merged --offline --fasta %s -i %s.%s.vcf --everything --no_intergenic --filter no_stop_retained_variant --filter no_synonymous_variant --json -o %s.%s.json --fork 16' % (VEP,REF_FASTA,base_output,program,base_output,program),shell=False)
    #except:
     #   print "ERROR: Could not initiate annotation on VCF file"
        
def Move_files_1(base_output):
    print "Moving files to new directory named %s to prepare for final spreadsheet processing..." % base_output
    try:
        subprocess.call('mkdir %s' % base_output,shell=True)
        subprocess.call('mv %s.ionreporter.no_cnv.json %s/%s.ionreporter.no_cnv.json' % (base_output,base_output,base_output),shell=True)
        subprocess.call('mv %s.ionreporter.cnv.vcf %s/%s.ionreporter.cnv.vcf' % (base_output,base_output,base_output),shell=True)
        subprocess.call('mv %s.varscan.json %s/%s.varscan.json' % (base_output,base_output,base_output),shell=True)
        subprocess.call('mv %s.ionreporter.tsv %s/%s.ionreporter.tsv' % (base_output,base_output,base_output),shell=True)
    except:
        print "ERROR: Failed to move files"
        
def Eddy_command(EDDY,base_output):
    print "Processing final spreadsheet for %s..." % base_output
    try:
        subprocess.call('java -jar %s -d %s' % (EDDY,base_output),shell=True)
    except:
        print "ERROR: Could not process final spreadsheet"

def Move_files_2(base_output):
    print "Moving all final files..."
    try:
        subprocess.call('mv %s* %s/ 2>> /tmp/error' % (base_output,base_output),shell=True)
    except:
        print "ERROR: Could not move final files"
        
def Galaxy_special_function(base_output,galaxy_output_directory):
    print "Processing moving files to Galaxy directory..."
    try:
        subprocess.call('mkdir %s' % galaxy_output_directory,shell=True)
        subprocess.call('cp -r %s/* %s' % (base_output,galaxy_output_directory),shell=True)
    except:
        print "ERROR: Could not move to Galaxy output directory..."
